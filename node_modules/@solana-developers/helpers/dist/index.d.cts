import { Keypair, Cluster, Connection, PublicKey, Commitment, TransactionInstruction, AddressLookupTableAccount } from '@solana/web3.js';

declare const keypairToSecretKeyJSON: (keypair: Keypair) => string;
declare const getCustomErrorMessage: (possibleProgramErrors: Array<string>, errorMessage: string) => string | null;
declare const getExplorerLink: (linkType: "transaction" | "tx" | "address" | "block", id: string, cluster?: Cluster | "localnet") => string;
declare const getKeypairFromFile: (filepath?: string) => Promise<Keypair>;
declare const getKeypairFromEnvironment: (variableName: string) => Keypair;
declare const addKeypairToEnvFile: (keypair: Keypair, variableName: string, envFileName?: string) => Promise<void>;
interface InitializeKeypairOptions {
    envFileName?: string;
    envVariableName?: string;
    airdropAmount?: number | null;
    minimumBalance?: number;
    keypairPath?: string;
}
declare const initializeKeypair: (connection: Connection, options?: InitializeKeypairOptions) => Promise<Keypair>;
declare const airdropIfRequired: (connection: Connection, publicKey: PublicKey, airdropAmount: number, minimumBalance: number) => Promise<number>;
declare const confirmTransaction: (connection: Connection, signature: string, commitment?: Commitment) => Promise<string>;
declare const makeKeypairs: (amount: number) => Array<Keypair>;
declare const getLogs: (connection: Connection, tx: string) => Promise<Array<string>>;
declare const getSimulationComputeUnits: (connection: Connection, instructions: Array<TransactionInstruction>, payer: PublicKey, lookupTables: Array<AddressLookupTableAccount> | [
]) => Promise<number | null>;
declare const createAccountsMintsAndTokenAccounts: (usersAndTokenBalances: Array<Array<number>>, lamports: number, connection: Connection, payer: Keypair) => Promise<{
    users: Keypair[];
    mints: Keypair[];
    tokenAccounts: PublicKey[][];
}>;

export { InitializeKeypairOptions, addKeypairToEnvFile, airdropIfRequired, confirmTransaction, createAccountsMintsAndTokenAccounts, getCustomErrorMessage, getExplorerLink, getKeypairFromEnvironment, getKeypairFromFile, getLogs, getSimulationComputeUnits, initializeKeypair, keypairToSecretKeyJSON, makeKeypairs };
